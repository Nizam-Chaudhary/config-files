#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const emmet_helper_1 = require("@vscode/emmet-helper");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const node_1 = require("vscode-languageserver/node");
const connection = (0, node_1.createConnection)(node_1.ProposedFeatures.all);
const documents = new node_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument);
let globalConfig = {};
/**
 * @see {@link https://github.com/microsoft/vscode-emmet-helper/blob/ea184b3b7d6d7ffbc1721b5ce986c8477d420127/src/test/emmetHelper.test.ts#L40-L79}
 */
const fileService = {
    readFile(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            if (uri.scheme !== 'file') {
                throw new Error(`schema ${uri.scheme} is not supported`);
            }
            return yield util_1.default.promisify(fs_1.default.readFile)(uri.fsPath);
        });
    },
    stat(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            if (uri.scheme !== 'file') {
                throw new Error(`schema ${uri.scheme} is not supported`);
            }
            return new Promise((c, e) => {
                fs_1.default.stat(uri.fsPath, (err, stats) => {
                    if (err) {
                        if (err.code === 'ENOENT') {
                            return c({ type: emmet_helper_1.FileType.Unknown, ctime: -1, mtime: -1, size: -1 });
                        }
                        else {
                            return e(err);
                        }
                    }
                    let type = emmet_helper_1.FileType.Unknown;
                    if (stats.isFile()) {
                        type = emmet_helper_1.FileType.File;
                    }
                    else if (stats.isDirectory()) {
                        type = emmet_helper_1.FileType.Directory;
                    }
                    else if (stats.isSymbolicLink()) {
                        type = emmet_helper_1.FileType.SymbolicLink;
                    }
                    c({
                        type,
                        ctime: stats.ctime.getTime(),
                        mtime: stats.mtime.getTime(),
                        size: stats.size,
                    });
                });
            });
        });
    },
};
connection.onInitialize((params) => {
    var _a;
    globalConfig = params.initializationOptions || {};
    if ((_a = globalConfig.extensionsPath) === null || _a === void 0 ? void 0 : _a.length) {
        const absolutePaths = globalConfig.extensionsPath.map((extensionPath) => path_1.default.isAbsolute(extensionPath)
            ? extensionPath
            : path_1.default.resolve(extensionPath));
        (0, emmet_helper_1.updateExtensionsPath)(absolutePaths, fileService);
    }
    return {
        capabilities: {
            textDocumentSync: node_1.TextDocumentSyncKind.Incremental,
            completionProvider: {
                resolveProvider: false,
                triggerCharacters: [
                    // NOTE: For cases where is valid to expand emmet abbreviations with
                    // special characters
                    '!', // eg. `!` and `!!!` snippets in html or `!important` in css
                    ':', // eg. `w:` should expand to `width: |;`
                    '>', // https://docs.emmet.io/abbreviations/syntax/#child-gt
                    '+', // https://docs.emmet.io/abbreviations/syntax/#sibling
                    '^', // https://docs.emmet.io/abbreviations/syntax/#climb-up
                    '*', // https://docs.emmet.io/abbreviations/syntax/#multiplication
                    ')', // https://docs.emmet.io/abbreviations/syntax/#grouping
                    '.', // https://docs.emmet.io/abbreviations/syntax/#id-and-class
                    ']', // https://docs.emmet.io/abbreviations/syntax/#custom-attributes
                    '@', // https://docs.emmet.io/abbreviations/syntax/#changing-numbering-base-and-direction
                    '}', // https://docs.emmet.io/abbreviations/syntax/#text
                    '/', // for self-closing tags, eg. `div/` should expand to `<div />|`
                    // NOTE: For cases where completion is not triggered by typing a
                    // single character
                    ...'abcdefghijklmnopqrstuvwxyz',
                    // NOTE: For cases where completion is not triggered by typing a
                    // single character or because numbers cannot be used to trigger
                    // completion
                    ...'0123456789',
                ],
            },
        },
    };
});
connection.onCompletion((textDocumentPosition) => {
    var _a, _b, _c;
    const document = documents.get(textDocumentPosition.textDocument.uri);
    if (!document) {
        return;
    }
    const editorLanguage = document.languageId;
    const emmetLanguage = (_a = (0, emmet_helper_1.getEmmetMode)(editorLanguage)) !== null && _a !== void 0 ? _a : 'html';
    const syntax = !!((_b = globalConfig.includeLanguages) === null || _b === void 0 ? void 0 : _b[editorLanguage])
        ? ((_c = (0, emmet_helper_1.getEmmetMode)(globalConfig.includeLanguages[editorLanguage])) !== null && _c !== void 0 ? _c : emmetLanguage)
        : emmetLanguage;
    const position = textDocumentPosition.position;
    return (0, emmet_helper_1.doComplete)(document, position, syntax, globalConfig);
});
connection.onRequest('emmet/expandAbbreviation', (params) => {
    var _a, _b, _c;
    const emmetLanguage = (_a = (0, emmet_helper_1.getEmmetMode)(params.language)) !== null && _a !== void 0 ? _a : 'html';
    const syntax = !!((_b = globalConfig.includeLanguages) === null || _b === void 0 ? void 0 : _b[params.language])
        ? ((_c = (0, emmet_helper_1.getEmmetMode)(globalConfig.includeLanguages[params.language])) !== null && _c !== void 0 ? _c : emmetLanguage)
        : emmetLanguage;
    return (0, emmet_helper_1.expandAbbreviation)(params.abbreviation, Object.assign({ syntax }, params.options));
});
documents.listen(connection);
connection.listen();
